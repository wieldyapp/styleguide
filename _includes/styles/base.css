html {
  width: 100%;
  height: -webkit-fill-available;

  overflow: hidden;

  font-size: var(--scale-0);

  font-family: var(--font-family-standard);
  line-height: var(--leading-normal);

  -webkit-user-select: none;
  user-select: none;
  scroll-behavior: smooth;
}

body {
  display: grid;
  grid-template-areas: var(--grid-template-areas);
  grid-template-rows: var(--grid-template-rows);
  grid-template-columns: var(--grid-template-columns);

  min-height: 100vh;
  /* mobile viewport bug fix */
  min-height: -webkit-fill-available;

  margin: 0;

  color: var(--color-neutral-50);

  background-color: var(--color-background);

  opacity: 0;

  transition: opacity 120ms;

  will-change: opacity;
}

body.loaded {
  opacity: 1;
}

header {

  display: flex;
  grid-area: header;

  align-items: center;

  justify-content:space-between;

  box-sizing: border-box;

  height: 56px;

  padding-top: env(safe-area-inset-top);
  padding-right: max(var(--spacing-0),env(safe-area-inset-right));
  padding-left: max(var(--spacing-0),env(safe-area-inset-left));

  background-color: var(--color-background);

  border-bottom: solid 1px var(--main-border-color);

}

nav {
  position: relative;

  grid-area: nav;

  height: 100vh;
  padding: 0 var(--spacing-0) max(var(--spacing-0), env(safe-area-inset-bottom)) max(var(--spacing-0), env(safe-area-inset-left));

  overflow-x: hidden;
  overflow-y: auto;

  background-color: var(--color-background);

  border-right: solid 1px var(--main-border-color);

  will-change: width;
}

main {
  grid-area: content;
  box-sizing: border-box;

  height: calc(100vh - 56px); /* add variable for header height */

  padding-top: var(--spacing-2);
  padding-right: max(var(--spacing-0),env(safe-area-inset-right));
  padding-bottom: max(var(--spacing-0),env(safe-area-inset-bottom));
  padding-left: max(var(--spacing-0),env(safe-area-inset-left));
  overflow-x: hidden;

  contain: content;
}

@supports (-webkit-touch-callout: none) {
  /* CSS specific to iOS devices */
  nav, main, aside {
    /* mobile viewport bug fix */
    max-height: -webkit-fill-available;
  }
}

@supports not (-webkit-touch-callout: none) {
  /* CSS for other than iOS devices */
}

aside {

  position: relative;

  z-index: var(--layer-1);

  grid-area: aside;

  box-sizing: border-box;

  width: 0;

  height: calc(100vh - 56px);

  overflow-y: auto;

  background-color: var(--color-background);
  border-left: 1px solid var(--main-border-color);

  box-shadow: var(--elevation-2);

  visibility:hidden;

  transition: width 250ms var(--easing-decelerate), box-shadow 150ms var(--easing-decelerate);

  will-change: width, box-shadow;

}

aside[data-open] {

  width: clamp(var(--ideal-aside));

  visibility: visible;
}

body:not(:hover) aside {
  transition: none;
}

@media (max-width: 1023px) {

  aside {

    position: fixed;

    top: 56px;

    right: 0;

    z-index: var(--layer-1);

    width: 100vw;

    height: calc(100% - 56px);

    border-top: none;

    transform: translateX(100vw);

    transition: transform 250ms var(--easing-decelerate);

  }

  aside[data-open] {

    z-index: var(--layer-1);

    width: 100vw;

    overflow-y: auto;

    border-left: none;
    box-shadow: none;
    transform: translateX(0);

    visibility: visible;
  }

}

toggle-switch {
  background-color: var(--color-control-backface);
  box-shadow: 0 0 0 1px var(--color-control-border);
}

toggle-switch:not([disabled]) {
  cursor: pointer;
}

toggle-switch:not([disabled]):not([checked]):hover {
  background-color: var(--color-control-backface-hover);
  box-shadow: 0 0 0 1px var(--color-control-backface-hover);
}

toggle-switch::after {
  background-color: var(--color-control);
  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.07), 0 1px 3px 0 rgba(59, 65, 94, 0.1);
}

toggle-switch[checked] {
  background-color: var(--color-primary-500);
  box-shadow: 0 0 0 1px var(--color-primary-500);
}

toggle-switch[checked]:hover {
  background-color: var(--color-primary-400);
  box-shadow: 0 0 0 1px var(--color-primary-400);
}

toggle-switch[checked]::after {
  background-color: var(--color-neutral-50);
}

checkbox-switch {
  background-color: var(--color-control-backface);
  box-shadow: none;
}

checkbox-switch:not([disabled]) {
  cursor: pointer;
}

checkbox-switch:not([disabled]):not([checked]):hover {
  background-color: var(--color-control-backface-hover);
}

checkbox-switch:not([disabled])::before {
  background: none;
  background-color: var(--color-primary-500);
}

checkbox-switch[checked]:not([disabled]):hover::before,
checkbox-switch[checked]:not([disabled]):focus::before {
  background-color: var(--color-primary-400);
}

scheme-switch[checked] {
  background-color: var(--color-control-backface);
  box-shadow: 0 0 0 1px var(--color-control-border);
}

scheme-switch[checked]::after {
  background-color: var(--color-control-backface);
  box-shadow: 0 0 0 1px var(--color-control-border);
}

table {
  width: 100%;
}

table,
tr,
td {
  border-collapse: collapse;
}

thead,
tr:not(:last-child) {
  border-bottom: solid 1px var(--color-neutral-500);
}

th {
  /* color: var(--main-font-color); */
  font-weight: var(--font-weight-semibold);
}

th,
td {
  padding: 1.5rem 2rem;

  text-align: left;
}

strong {
  font-weight: var(--font-weight-semibold);
}

label > checkbox-switch {
  margin-right: 0.5rem;
}

img-thumbnail {
  transition: opacity 150ms ease-out;
}

img-thumbnail:not([loaded]) {
  opacity: 0;
}

.checkboxes {
  background: none;
  border: none;
}

.checkboxes > div {
  padding: 0.5rem 2rem;

  background: none;
  border: 0;
}

pre {
  display: flex;
  padding: 2rem;

  background: var(--color-neutral-700);
}

code {
  color: rgb(248, 229, 185);
  font-weight: 400;
  font-size: 13px;
  font-family: var(--font-family-mono);
}

code > span {
  color: var(--syntax-punctuation);
}

/* Reqwork */

details {
  width: 100%;
  margin: 1rem 0 0;
}

summary {
  color: var(--color-neutral-300);
  font-weight: var(--font-weight-semibold);
  letter-spacing: var(--tracking-1);

  cursor: pointer;

}

summary { list-style-type: none; } /* Firefox */
summary::-webkit-details-marker, /* Chrome */
summary::marker {
  display: none;
}

summary > span {
  display: flex;
  justify-content: space-between;
}

summary > span::after {
  width: 16px;
  height: 16px;
  margin-top: 3px;

  /* justify-self: end; */
  margin-right: 8px;

  /* background-color: var(--main-border-color); */

  background-color: var(--color-neutral-400);

  content: "";
  clip-path: polygon(
    25% 26%,
    15% 35%,
    30% 50%,
    50% 70%,
    70% 50%,
    85% 35%,
    75% 25%,
    50% 50%
  );
}

/*
  * Prevents svg to shrink when flex is applie
*/
svg {
  flex-shrink: 0;
}

/* By using [open] we can define different styles when the disclosure widget is open */
details[open] summary > span::after {
  transform: rotate(180deg);
}